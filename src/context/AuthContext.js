// Импортируем необходимые хуки из React
import { createContext, useContext, useEffect, useState } from 'react';
// Импортируем объект аутентификации из Firebase
import { auth } from '../firebase';

// Создаем контекст аутентификации
// Создаётся объект контекста, который будет хранить данные аутентификации
// Позволяет передавать данные глубоко по дереву компонентов без явной передачи пропсов
const AuthContext = createContext();

// Кастомный хук для удобного доступа к контексту
// useAuth будет содержаться 
// Внутри использует useContext()
// Возвращает текущее значение контекста ({ currentUser, loading })
export function useAuth() {
  return useContext(AuthContext);
}

// Провайдер контекста аутентификации компонент в который обернута часть нашего приложения
//  мы возвращаем в наш компонент значение value в котором храниться информация о пользователе 
// и AuthContext.Provider чтобы все дочерние элементы могли получить доступ к контексту
export function AuthProvider({ children }) {
  // Состояние для хранения текущего пользователя
  const [currentUser, setCurrentUser] = useState(null);
  // Состояние для отслеживания загрузки данных аутентификации
  const [loading, setLoading] = useState(true);

  // Эффект для подписки на изменения состояния аутентификации
  useEffect(() => {
    // Подписываемся на изменения состояния аутентификации
    // Вызывается onAuthStateChanged для подписки на изменения аутентификации
    const unsubscribe = auth.onAuthStateChanged((user) => {
      // user будет содержать данные пользователя или null, если не авторизован
      setCurrentUser(user);
      // Устанавливаем loading в false после получения данных
      setLoading(false);
    });

    // Функция отписки при размонтировании компонента
    return unsubscribe;
  }, []); // Пустой массив зависимостей означает, что эффект выполнится только при монтировании

  // Значение, которое будет доступно через контекст
  const value = {
    currentUser, // Текущий пользователь (или null)
    loading      // Состояние загрузки (true/false)
  };



//   AuthContext.Provider:
// Это компонент, предоставляемый React-контекстом
// Принимает пропс value, который будет доступен всем потребителям контекста
// Создаёт "контекстную область видимости" для всех дочерних элементов
// value={value}:
// Передаём объект с текущим состоянием:
// javascript
// const value = {
//   currentUser, // данные пользователя или null
//   loading      // флаг загрузки
// };
// При изменении этого объекта все потребители контекста получат обновления
// {!loading && children}:
// Условный рендеринг:
// Если loading равно false, рендерим children
// Если loading равно true, ничего не рендерим (показываем "пустоту")
// Это гарантирует, что:
// Дочерние компоненты не получат undefined при первой загрузке
// Интерфейс не будет "моргать" между состояниями
  // Рендерим провайдер контекста
  return (
    <AuthContext.Provider value={value}>
      {/* Рендерим children только после завершения загрузки */}
      {!loading && children}
    </AuthContext.Provider>
  );
}



// НИЖЕ СОЗДАНИЕ  КОНТЕКСТА ДЛЯ оборочивания части кода в нашем случае для аутентификации пользователя и предоставляет доступ всем элементам к нужным значениям
// createContext() — это функция React, которая создаёт объект контекста. Это механизм для передачи данных через дерево компонентов без явной передачи пропсов на каждом уровне.

// Создание контекста:
// javascript
// const AuthContext = createContext();
// После выполнения этой строки мы получаем объект с двумя важными компонентами:

// AuthContext.Provider - компонент, который предоставляет значение контекста

// AuthContext.Consumer - компонент для доступа к значению (используется реже с появлением хуков)

// Детали реализации в данном коде:
// Создание провайдера:

// javascript
// export function AuthProvider({ children }) {
//   // ...логика состояния...
//   return (
//     <AuthContext.Provider value={value}>
//       {!loading && children}
//     </AuthContext.Provider>
//   );
// }
// AuthProvider оборачивает часть приложения

// Принимает children - дочерние компоненты

// Передаёт объект value всем потребителям контекста

// Значение контекста:

// javascript
// const value = {
//   currentUser, // null или объект пользователя
//   loading      // boolean
// };
// Это значение будет доступно всем компонентам, использующим этот контекст

// Потребление контекста:

// javascript
// export function useAuth() {
//   return useContext(AuthContext);
// }
// Кастомный хук useAuth() предоставляет удобный способ доступа к контексту:

// Внутри использует useContext()

// Возвращает текущее значение контекста ({ currentUser, loading })